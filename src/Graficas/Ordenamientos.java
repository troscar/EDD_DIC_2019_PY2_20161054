/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Graficas;

import java.awt.Scrollbar;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.Timer;
import javax.swing.plaf.ScrollBarUI;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import static proyecto2_edd.Proyecto2_EDD.arbolAVL;

/**
 *
 * @author tracs
 */
public class Ordenamientos extends javax.swing.JFrame {
    public ArrayList<Integer> arreglo;
    /**
     * Creates new form Ordenamientos
     */
    public String nom;
    public String ape;
    public Ordenamientos(String n ,String a) {
        nom = n;
        ape = a;
        initComponents();
        setLayout(null);
        setTitle("Ordenamiento de Usuarios");
        setLocationRelativeTo(null);
        
        
    }

    private Ordenamientos() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Ordenamientos:");

        jButton2.setText("Burbuja");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jLabel3);

        jButton3.setText("por Inserci√≥n");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Quicksort");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(449, 449, 449)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(33, 33, 33)
                        .addComponent(jButton2)
                        .addGap(39, 39, 39)
                        .addComponent(jButton3)
                        .addGap(35, 35, 35)
                        .addComponent(jButton4)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        arreglo  = new ArrayList<>();
        JFileChooser jfc = new JFileChooser();
        jfc.showOpenDialog(this);
        File Archivo = jfc.getSelectedFile();

        final JSONParser parser = new JSONParser();
        if( Archivo.getAbsolutePath() !=  null){

            Object obj = null;
            try {
                obj = parser.parse(new FileReader(Archivo.getAbsolutePath() ));
            } catch (IOException ex) {
                Logger.getLogger(Arbol_Avl.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(Arbol_Avl.class.getName()).log(Level.SEVERE, null, ex);
            }
            JSONObject arbol=(JSONObject) obj;
            JSONArray jsonA =(JSONArray)arbol.get("Array");
            //System.out.println(jsonA.size());
            JSONObject usuario;
            //System.out.println(jsonA.get(0));
            int num;
            int c =0;
            for(Object j: jsonA){ 
                usuario = (JSONObject) j;
                System.out.println(usuario.get("num"));
                num = (int)(long)usuario.get("num");
                arreglo.add(num);
            }
            //System.out.println(arreglo);
            Ordenar(arreglo);
        }else{
            JOptionPane.showMessageDialog(null, "NO A INGRESADO ARCHIVO");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Usuario usuario = new Usuario(nom, ape);
        usuario.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        arreglo  = new ArrayList<>();
        JFileChooser jfc = new JFileChooser();
        jfc.showOpenDialog(this);
        File Archivo = jfc.getSelectedFile();

        final JSONParser parser = new JSONParser();
        if( Archivo.getAbsolutePath() !=  null){

            Object obj = null;
            try {
                obj = parser.parse(new FileReader(Archivo.getAbsolutePath() ));
            } catch (IOException | ParseException ex) {
                Logger.getLogger(Arbol_Avl.class.getName()).log(Level.SEVERE, null, ex);
            }
            JSONObject arbol=(JSONObject) obj;
            JSONArray jsonA =(JSONArray)arbol.get("Array");
            //System.out.println(jsonA.size());
            JSONObject usuario;
            //System.out.println(jsonA.get(0));
            int num;
            int c =0;
            for(Object j: jsonA){
                //System.out.println(arreglo);
                 
                usuario = (JSONObject) j;
                System.out.println(usuario.get("num"));
                num = (int)(long)usuario.get("num");
                arreglo.add(num);
            }
        }else{
            JOptionPane.showMessageDialog(null, "NO A INGRESADO ARCHIVO");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        arreglo  = new ArrayList<>();
        JFileChooser jfc = new JFileChooser();
        jfc.showOpenDialog(this);
        File Archivo = jfc.getSelectedFile();
        int arrayaux [];
        final JSONParser parser = new JSONParser();
        if( Archivo.getAbsolutePath() !=  null){

            Object obj = null;
            try {
                obj = parser.parse(new FileReader(Archivo.getAbsolutePath() ));
            } catch (IOException ex) {
                Logger.getLogger(Arbol_Avl.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(Arbol_Avl.class.getName()).log(Level.SEVERE, null, ex);
            }
            JSONObject arbol=(JSONObject) obj;
            JSONArray jsonA =(JSONArray)arbol.get("Array");
            //System.out.println(jsonA.size());
            JSONObject usuario;
            //System.out.println(jsonA.get(0));
            int num;
            int c =0;
            for(Object j: jsonA){ 
                usuario = (JSONObject) j;
                System.out.println(usuario.get("num"));
                num = (int)(long)usuario.get("num");
                arreglo.add(num);
            }
            //System.out.println(arreglo);
            arrayaux= new int[arreglo.size()];
            for (int i = 0; i < arreglo.size(); i++) {
                arrayaux[i]=arreglo.get(i);
            }
            ordenarRapido(arrayaux);
        }else{
            JOptionPane.showMessageDialog(null, "NO A INGRESADO ARCHIVO");
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed
   
    public void ordenarRapido(int vec[]){
            final int N=vec.length;
            quickSort(vec, 0, N-1);
    }

    public  void quickSort(int vec[], int inicio, int fin){
            if(inicio>=fin) return;
            int pivote=vec[inicio];
            int elemIzq=inicio+1;
            int elemDer=fin;
            while(elemIzq<=elemDer){
                    while(elemIzq<=fin && vec[elemIzq]<pivote){
                            elemIzq++;
                    }
                    while(elemDer>inicio && vec[elemDer]>=pivote){
                            elemDer--;
                    }
                    if(elemIzq<elemDer){
                            int temp=vec[elemIzq];
                            vec[elemIzq]=vec[elemDer];
                            vec[elemDer]=temp;
                            imprimirVector(vec);
                            generar_graph2(vec);
                            try {
                                Thread.sleep(3000);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Ordenamientos.class.getName()).log(Level.SEVERE, null, ex);
                            }
                    }
            }

            if(elemDer>inicio){
                    int temp=vec[inicio];
                    vec[inicio]=vec[elemDer];
                    vec[elemDer]=temp;
                    imprimirVector(vec);
                    generar_graph2(vec);
                    try {
                        Thread.sleep(3000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Ordenamientos.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
            quickSort(vec, inicio, elemDer-1);
            quickSort(vec, elemDer+1, fin);
            //imprimirVector(vec);
            
    }

    public static void imprimirVector(int vec[]){
            for(int i=0;i<vec.length;i++){
                    System.out.print(vec[i]+" ");
            }
            System.out.println("");
    }

        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ordenamientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ordenamientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ordenamientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ordenamientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ordenamientos().setVisible(true);
            }
        });
    }
    
    public void Ordenar (ArrayList<Integer> a){
        generar_graph(a);
        
        try {
            Thread.sleep(4000);
        } catch (InterruptedException ex) {
            Logger.getLogger(Ordenamientos.class.getName()).log(Level.SEVERE, null, ex);
        }
        int aux =0,aux2=0;
        boolean cam = false;
        while(true){
            cam = false;
            for(int i = 1;i<a.size();i++){
                if(a.get(i)<a.get(i-1)){
                    aux = a.get(i);
                    a.set(i, a.get(i-1));
                    a.set(i-1,aux);
                    cam = true;
                }
                generar_graph(a);
                System.out.println(a);
                try {
                    Thread.sleep(4000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Ordenamientos.class.getName()).log(Level.SEVERE, null, ex);
                }
//                               
            }
            if(cam==false){
                System.out.println("fin");
                break;
            }
            ImageIcon icono = new ImageIcon("C:\\Users\\tracs\\Desktop\\arreglo1.jpg"); // esta llamada espera a que la imagen est√© cargada.
            int as  = icono.getIconHeight();
            int b = icono.getIconWidth();
            System.out.println(a+" "+b);
            jLabel3.setSize(as, b);
            jLabel3.setIcon(icono);
        }
        
        
    }
    
    public void generar_graph(ArrayList<Integer> a){
         String ruta = "C:\\Users\\tracs\\Desktop\\arre1.txt";
        
        try {
            FileWriter fichero = new FileWriter(ruta);
            PrintWriter pw = new PrintWriter(fichero);

            String datosGrafo ="";
       
            datosGrafo = getCodigoGraphviz(a);
            
             pw.print(datosGrafo);

            fichero.close();

            Runtime rt = Runtime.getRuntime();
            
            rt.exec("dot -Tpng " + ruta + " -o C:\\Users\\tracs\\Desktop\\arreglo1.jpg");
            

        } catch (IOException e) {
            System.out.println(e.toString());
        }
    }
    
    public void generar_graph2(int a[]){
         String ruta = "C:\\Users\\tracs\\Desktop\\arre1.txt";

        try {
            FileWriter fichero = new FileWriter(ruta);
            PrintWriter pw = new PrintWriter(fichero);

            String datosGrafo ="";
       
            datosGrafo = getCodigoGraphviz2(a);
            
             pw.print(datosGrafo);

            fichero.close();

            Runtime rt = Runtime.getRuntime();
            
            rt.exec("dot -Tpng " + ruta + " -o C:\\Users\\tracs\\Desktop\\arreglo1.jpg");
            

        } catch (IOException e) {
            System.out.println(e.toString());
        }
    }
    
    public String getCodigoGraphviz(ArrayList<Integer> a) {
        return "digraph grafica{\n"
                + "nodesep=.05;\n"
                + "rankdir=LR;"
                + "node [shape=record,width = 1.5];\n"
                + "label=\"Orden Burbuja \";"
                + getCodigoInterno(a) + "}\n";
    }
    
    public String getCodigoGraphviz2(int a[]) {
        return "digraph grafica{\n"
                + "nodesep=.05;\n"
                + "rankdir=LR;"
                + "node [shape=record,width = 1.5];\n"
                + "label=\"Orden Burbuja \";"
                + getCodigoInterno2(a) + "}\n";
    }
    
    public String getCodigoInterno(ArrayList<Integer> a) {
        String etiqueta = "",ss="";
        for (Integer a1 : a) {
            ss = ss +a1.toString()+ "|";
        }
        etiqueta = etiqueta + "nodo0 [ label =\"{ " + ss.toString() +  "} \"];\n";
        return etiqueta;
    }
    
    public String getCodigoInterno2(int a[]) {
        String etiqueta = "",ss="";
        for (Integer a1 : a) {
            ss = ss +a1.toString()+ "|";
        }
        etiqueta = etiqueta + "nodo0 [ label =\"{ " + ss.toString() +  "} \"];\n";
        return etiqueta;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
